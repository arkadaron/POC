/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrawlResultService } from "../crawlResult.service";
import { CrawlResultCreateInput } from "./CrawlResultCreateInput";
import { CrawlResult } from "./CrawlResult";
import { CrawlResultFindManyArgs } from "./CrawlResultFindManyArgs";
import { CrawlResultWhereUniqueInput } from "./CrawlResultWhereUniqueInput";
import { CrawlResultUpdateInput } from "./CrawlResultUpdateInput";

export class CrawlResultControllerBase {
  constructor(protected readonly service: CrawlResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrawlResult })
  async createCrawlResult(
    @common.Body() data: CrawlResultCreateInput
  ): Promise<CrawlResult> {
    return await this.service.createCrawlResult({
      data: {
        ...data,

        website: data.website
          ? {
              connect: data.website,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageUrl: true,
        result: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrawlResult] })
  @ApiNestedQuery(CrawlResultFindManyArgs)
  async crawlResults(@common.Req() request: Request): Promise<CrawlResult[]> {
    const args = plainToClass(CrawlResultFindManyArgs, request.query);
    return this.service.crawlResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageUrl: true,
        result: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrawlResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crawlResult(
    @common.Param() params: CrawlResultWhereUniqueInput
  ): Promise<CrawlResult | null> {
    const result = await this.service.crawlResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        pageUrl: true,
        result: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrawlResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrawlResult(
    @common.Param() params: CrawlResultWhereUniqueInput,
    @common.Body() data: CrawlResultUpdateInput
  ): Promise<CrawlResult | null> {
    try {
      return await this.service.updateCrawlResult({
        where: params,
        data: {
          ...data,

          website: data.website
            ? {
                connect: data.website,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pageUrl: true,
          result: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrawlResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrawlResult(
    @common.Param() params: CrawlResultWhereUniqueInput
  ): Promise<CrawlResult | null> {
    try {
      return await this.service.deleteCrawlResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          pageUrl: true,
          result: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
