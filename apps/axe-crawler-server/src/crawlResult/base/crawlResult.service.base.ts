/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CrawlResult as PrismaCrawlResult,
  Website as PrismaWebsite,
} from "@prisma/client";

export class CrawlResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrawlResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crawlResult.count(args);
  }

  async crawlResults(
    args: Prisma.CrawlResultFindManyArgs
  ): Promise<PrismaCrawlResult[]> {
    return this.prisma.crawlResult.findMany(args);
  }
  async crawlResult(
    args: Prisma.CrawlResultFindUniqueArgs
  ): Promise<PrismaCrawlResult | null> {
    return this.prisma.crawlResult.findUnique(args);
  }
  async createCrawlResult(
    args: Prisma.CrawlResultCreateArgs
  ): Promise<PrismaCrawlResult> {
    return this.prisma.crawlResult.create(args);
  }
  async updateCrawlResult(
    args: Prisma.CrawlResultUpdateArgs
  ): Promise<PrismaCrawlResult> {
    return this.prisma.crawlResult.update(args);
  }
  async deleteCrawlResult(
    args: Prisma.CrawlResultDeleteArgs
  ): Promise<PrismaCrawlResult> {
    return this.prisma.crawlResult.delete(args);
  }

  async getWebsite(parentId: string): Promise<PrismaWebsite | null> {
    return this.prisma.crawlResult
      .findUnique({
        where: { id: parentId },
      })
      .website();
  }
}
