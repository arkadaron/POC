/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrawlResult } from "./CrawlResult";
import { CrawlResultCountArgs } from "./CrawlResultCountArgs";
import { CrawlResultFindManyArgs } from "./CrawlResultFindManyArgs";
import { CrawlResultFindUniqueArgs } from "./CrawlResultFindUniqueArgs";
import { CreateCrawlResultArgs } from "./CreateCrawlResultArgs";
import { UpdateCrawlResultArgs } from "./UpdateCrawlResultArgs";
import { DeleteCrawlResultArgs } from "./DeleteCrawlResultArgs";
import { Website } from "../../website/base/Website";
import { CrawlResultService } from "../crawlResult.service";
@graphql.Resolver(() => CrawlResult)
export class CrawlResultResolverBase {
  constructor(protected readonly service: CrawlResultService) {}

  async _crawlResultsMeta(
    @graphql.Args() args: CrawlResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrawlResult])
  async crawlResults(
    @graphql.Args() args: CrawlResultFindManyArgs
  ): Promise<CrawlResult[]> {
    return this.service.crawlResults(args);
  }

  @graphql.Query(() => CrawlResult, { nullable: true })
  async crawlResult(
    @graphql.Args() args: CrawlResultFindUniqueArgs
  ): Promise<CrawlResult | null> {
    const result = await this.service.crawlResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrawlResult)
  async createCrawlResult(
    @graphql.Args() args: CreateCrawlResultArgs
  ): Promise<CrawlResult> {
    return await this.service.createCrawlResult({
      ...args,
      data: {
        ...args.data,

        website: args.data.website
          ? {
              connect: args.data.website,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CrawlResult)
  async updateCrawlResult(
    @graphql.Args() args: UpdateCrawlResultArgs
  ): Promise<CrawlResult | null> {
    try {
      return await this.service.updateCrawlResult({
        ...args,
        data: {
          ...args.data,

          website: args.data.website
            ? {
                connect: args.data.website,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrawlResult)
  async deleteCrawlResult(
    @graphql.Args() args: DeleteCrawlResultArgs
  ): Promise<CrawlResult | null> {
    try {
      return await this.service.deleteCrawlResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  async getWebsite(
    @graphql.Parent() parent: CrawlResult
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
