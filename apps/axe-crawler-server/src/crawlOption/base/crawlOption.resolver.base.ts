/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CrawlOption } from "./CrawlOption";
import { CrawlOptionCountArgs } from "./CrawlOptionCountArgs";
import { CrawlOptionFindManyArgs } from "./CrawlOptionFindManyArgs";
import { CrawlOptionFindUniqueArgs } from "./CrawlOptionFindUniqueArgs";
import { CreateCrawlOptionArgs } from "./CreateCrawlOptionArgs";
import { UpdateCrawlOptionArgs } from "./UpdateCrawlOptionArgs";
import { DeleteCrawlOptionArgs } from "./DeleteCrawlOptionArgs";
import { Website } from "../../website/base/Website";
import { CrawlOptionService } from "../crawlOption.service";
@graphql.Resolver(() => CrawlOption)
export class CrawlOptionResolverBase {
  constructor(protected readonly service: CrawlOptionService) {}

  async _crawlOptionsMeta(
    @graphql.Args() args: CrawlOptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CrawlOption])
  async crawlOptions(
    @graphql.Args() args: CrawlOptionFindManyArgs
  ): Promise<CrawlOption[]> {
    return this.service.crawlOptions(args);
  }

  @graphql.Query(() => CrawlOption, { nullable: true })
  async crawlOption(
    @graphql.Args() args: CrawlOptionFindUniqueArgs
  ): Promise<CrawlOption | null> {
    const result = await this.service.crawlOption(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CrawlOption)
  async createCrawlOption(
    @graphql.Args() args: CreateCrawlOptionArgs
  ): Promise<CrawlOption> {
    return await this.service.createCrawlOption({
      ...args,
      data: {
        ...args.data,

        website: args.data.website
          ? {
              connect: args.data.website,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CrawlOption)
  async updateCrawlOption(
    @graphql.Args() args: UpdateCrawlOptionArgs
  ): Promise<CrawlOption | null> {
    try {
      return await this.service.updateCrawlOption({
        ...args,
        data: {
          ...args.data,

          website: args.data.website
            ? {
                connect: args.data.website,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrawlOption)
  async deleteCrawlOption(
    @graphql.Args() args: DeleteCrawlOptionArgs
  ): Promise<CrawlOption | null> {
    try {
      return await this.service.deleteCrawlOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Website, {
    nullable: true,
    name: "website",
  })
  async getWebsite(
    @graphql.Parent() parent: CrawlOption
  ): Promise<Website | null> {
    const result = await this.service.getWebsite(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
