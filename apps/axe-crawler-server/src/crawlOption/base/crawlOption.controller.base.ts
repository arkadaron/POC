/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CrawlOptionService } from "../crawlOption.service";
import { CrawlOptionCreateInput } from "./CrawlOptionCreateInput";
import { CrawlOption } from "./CrawlOption";
import { CrawlOptionFindManyArgs } from "./CrawlOptionFindManyArgs";
import { CrawlOptionWhereUniqueInput } from "./CrawlOptionWhereUniqueInput";
import { CrawlOptionUpdateInput } from "./CrawlOptionUpdateInput";

export class CrawlOptionControllerBase {
  constructor(protected readonly service: CrawlOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CrawlOption })
  async createCrawlOption(
    @common.Body() data: CrawlOptionCreateInput
  ): Promise<CrawlOption> {
    return await this.service.createCrawlOption({
      data: {
        ...data,

        website: data.website
          ? {
              connect: data.website,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        optionValue: true,
        optionName: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CrawlOption] })
  @ApiNestedQuery(CrawlOptionFindManyArgs)
  async crawlOptions(@common.Req() request: Request): Promise<CrawlOption[]> {
    const args = plainToClass(CrawlOptionFindManyArgs, request.query);
    return this.service.crawlOptions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        optionValue: true,
        optionName: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CrawlOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async crawlOption(
    @common.Param() params: CrawlOptionWhereUniqueInput
  ): Promise<CrawlOption | null> {
    const result = await this.service.crawlOption({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        optionValue: true,
        optionName: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CrawlOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCrawlOption(
    @common.Param() params: CrawlOptionWhereUniqueInput,
    @common.Body() data: CrawlOptionUpdateInput
  ): Promise<CrawlOption | null> {
    try {
      return await this.service.updateCrawlOption({
        where: params,
        data: {
          ...data,

          website: data.website
            ? {
                connect: data.website,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          optionValue: true,
          optionName: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CrawlOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCrawlOption(
    @common.Param() params: CrawlOptionWhereUniqueInput
  ): Promise<CrawlOption | null> {
    try {
      return await this.service.deleteCrawlOption({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          optionValue: true,
          optionName: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
