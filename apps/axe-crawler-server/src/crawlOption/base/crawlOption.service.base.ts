/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CrawlOption as PrismaCrawlOption,
  Website as PrismaWebsite,
} from "@prisma/client";

export class CrawlOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrawlOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crawlOption.count(args);
  }

  async crawlOptions(
    args: Prisma.CrawlOptionFindManyArgs
  ): Promise<PrismaCrawlOption[]> {
    return this.prisma.crawlOption.findMany(args);
  }
  async crawlOption(
    args: Prisma.CrawlOptionFindUniqueArgs
  ): Promise<PrismaCrawlOption | null> {
    return this.prisma.crawlOption.findUnique(args);
  }
  async createCrawlOption(
    args: Prisma.CrawlOptionCreateArgs
  ): Promise<PrismaCrawlOption> {
    return this.prisma.crawlOption.create(args);
  }
  async updateCrawlOption(
    args: Prisma.CrawlOptionUpdateArgs
  ): Promise<PrismaCrawlOption> {
    return this.prisma.crawlOption.update(args);
  }
  async deleteCrawlOption(
    args: Prisma.CrawlOptionDeleteArgs
  ): Promise<PrismaCrawlOption> {
    return this.prisma.crawlOption.delete(args);
  }

  async getWebsite(parentId: string): Promise<PrismaWebsite | null> {
    return this.prisma.crawlOption
      .findUnique({
        where: { id: parentId },
      })
      .website();
  }
}
