/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AxeResult } from "./AxeResult";
import { AxeResultCountArgs } from "./AxeResultCountArgs";
import { AxeResultFindManyArgs } from "./AxeResultFindManyArgs";
import { AxeResultFindUniqueArgs } from "./AxeResultFindUniqueArgs";
import { DeleteAxeResultArgs } from "./DeleteAxeResultArgs";
import { AxeResultService } from "../axeResult.service";
@graphql.Resolver(() => AxeResult)
export class AxeResultResolverBase {
  constructor(protected readonly service: AxeResultService) {}

  async _axeResultsMeta(
    @graphql.Args() args: AxeResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AxeResult])
  async axeResults(
    @graphql.Args() args: AxeResultFindManyArgs
  ): Promise<AxeResult[]> {
    return this.service.axeResults(args);
  }

  @graphql.Query(() => AxeResult, { nullable: true })
  async axeResult(
    @graphql.Args() args: AxeResultFindUniqueArgs
  ): Promise<AxeResult | null> {
    const result = await this.service.axeResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AxeResult)
  async deleteAxeResult(
    @graphql.Args() args: DeleteAxeResultArgs
  ): Promise<AxeResult | null> {
    try {
      return await this.service.deleteAxeResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
