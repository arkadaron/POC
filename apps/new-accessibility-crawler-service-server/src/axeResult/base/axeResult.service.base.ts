/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AxeResult as PrismaAxeResult } from "@prisma/client";

export class AxeResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AxeResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.axeResult.count(args);
  }

  async axeResults(
    args: Prisma.AxeResultFindManyArgs
  ): Promise<PrismaAxeResult[]> {
    return this.prisma.axeResult.findMany(args);
  }
  async axeResult(
    args: Prisma.AxeResultFindUniqueArgs
  ): Promise<PrismaAxeResult | null> {
    return this.prisma.axeResult.findUnique(args);
  }
  async createAxeResult(
    args: Prisma.AxeResultCreateArgs
  ): Promise<PrismaAxeResult> {
    return this.prisma.axeResult.create(args);
  }
  async updateAxeResult(
    args: Prisma.AxeResultUpdateArgs
  ): Promise<PrismaAxeResult> {
    return this.prisma.axeResult.update(args);
  }
  async deleteAxeResult(
    args: Prisma.AxeResultDeleteArgs
  ): Promise<PrismaAxeResult> {
    return this.prisma.axeResult.delete(args);
  }
}
