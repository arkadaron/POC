/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AxeResultService } from "../axeResult.service";
import { AxeResultCreateInput } from "./AxeResultCreateInput";
import { AxeResult } from "./AxeResult";
import { AxeResultFindManyArgs } from "./AxeResultFindManyArgs";
import { AxeResultWhereUniqueInput } from "./AxeResultWhereUniqueInput";
import { AxeResultUpdateInput } from "./AxeResultUpdateInput";

export class AxeResultControllerBase {
  constructor(protected readonly service: AxeResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AxeResult })
  async createAxeResult(
    @common.Body() data: AxeResultCreateInput
  ): Promise<AxeResult> {
    return await this.service.createAxeResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AxeResult] })
  @ApiNestedQuery(AxeResultFindManyArgs)
  async axeResults(@common.Req() request: Request): Promise<AxeResult[]> {
    const args = plainToClass(AxeResultFindManyArgs, request.query);
    return this.service.axeResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AxeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async axeResult(
    @common.Param() params: AxeResultWhereUniqueInput
  ): Promise<AxeResult | null> {
    const result = await this.service.axeResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AxeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAxeResult(
    @common.Param() params: AxeResultWhereUniqueInput,
    @common.Body() data: AxeResultUpdateInput
  ): Promise<AxeResult | null> {
    try {
      return await this.service.updateAxeResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AxeResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAxeResult(
    @common.Param() params: AxeResultWhereUniqueInput
  ): Promise<AxeResult | null> {
    try {
      return await this.service.deleteAxeResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
