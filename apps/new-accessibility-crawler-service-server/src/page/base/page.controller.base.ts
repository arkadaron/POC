/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PageService } from "../page.service";
import { PageCreateInput } from "./PageCreateInput";
import { Page } from "./Page";
import { PageFindManyArgs } from "./PageFindManyArgs";
import { PageWhereUniqueInput } from "./PageWhereUniqueInput";
import { PageUpdateInput } from "./PageUpdateInput";
import { AnalysisResultFindManyArgs } from "../../analysisResult/base/AnalysisResultFindManyArgs";
import { AnalysisResult } from "../../analysisResult/base/AnalysisResult";
import { AnalysisResultWhereUniqueInput } from "../../analysisResult/base/AnalysisResultWhereUniqueInput";

export class PageControllerBase {
  constructor(protected readonly service: PageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Page })
  async createPage(@common.Body() data: PageCreateInput): Promise<Page> {
    return await this.service.createPage({
      data: {
        ...data,

        website: data.website
          ? {
              connect: data.website,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Page] })
  @ApiNestedQuery(PageFindManyArgs)
  async pages(@common.Req() request: Request): Promise<Page[]> {
    const args = plainToClass(PageFindManyArgs, request.query);
    return this.service.pages({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async page(
    @common.Param() params: PageWhereUniqueInput
  ): Promise<Page | null> {
    const result = await this.service.page({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,

        website: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePage(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() data: PageUpdateInput
  ): Promise<Page | null> {
    try {
      return await this.service.updatePage({
        where: params,
        data: {
          ...data,

          website: data.website
            ? {
                connect: data.website,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Page })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePage(
    @common.Param() params: PageWhereUniqueInput
  ): Promise<Page | null> {
    try {
      return await this.service.deletePage({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,

          website: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/analysisResults")
  @ApiNestedQuery(AnalysisResultFindManyArgs)
  async findAnalysisResults(
    @common.Req() request: Request,
    @common.Param() params: PageWhereUniqueInput
  ): Promise<AnalysisResult[]> {
    const query = plainToClass(AnalysisResultFindManyArgs, request.query);
    const results = await this.service.findAnalysisResults(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        summary: true,

        website: {
          select: {
            id: true,
          },
        },

        page: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/analysisResults")
  async connectAnalysisResults(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        connect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/analysisResults")
  async updateAnalysisResults(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        set: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/analysisResults")
  async disconnectAnalysisResults(
    @common.Param() params: PageWhereUniqueInput,
    @common.Body() body: AnalysisResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      analysisResults: {
        disconnect: body,
      },
    };
    await this.service.updatePage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
