/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccessibilityIssue as PrismaAccessibilityIssue,
  AnalysisResult as PrismaAnalysisResult,
} from "@prisma/client";

export class AccessibilityIssueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessibilityIssueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessibilityIssue.count(args);
  }

  async accessibilityIssues(
    args: Prisma.AccessibilityIssueFindManyArgs
  ): Promise<PrismaAccessibilityIssue[]> {
    return this.prisma.accessibilityIssue.findMany(args);
  }
  async accessibilityIssue(
    args: Prisma.AccessibilityIssueFindUniqueArgs
  ): Promise<PrismaAccessibilityIssue | null> {
    return this.prisma.accessibilityIssue.findUnique(args);
  }
  async createAccessibilityIssue(
    args: Prisma.AccessibilityIssueCreateArgs
  ): Promise<PrismaAccessibilityIssue> {
    return this.prisma.accessibilityIssue.create(args);
  }
  async updateAccessibilityIssue(
    args: Prisma.AccessibilityIssueUpdateArgs
  ): Promise<PrismaAccessibilityIssue> {
    return this.prisma.accessibilityIssue.update(args);
  }
  async deleteAccessibilityIssue(
    args: Prisma.AccessibilityIssueDeleteArgs
  ): Promise<PrismaAccessibilityIssue> {
    return this.prisma.accessibilityIssue.delete(args);
  }

  async getAnalysisResult(
    parentId: string
  ): Promise<PrismaAnalysisResult | null> {
    return this.prisma.accessibilityIssue
      .findUnique({
        where: { id: parentId },
      })
      .analysisResult();
  }
}
