/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccessibilityIssueService } from "../accessibilityIssue.service";
import { AccessibilityIssueCreateInput } from "./AccessibilityIssueCreateInput";
import { AccessibilityIssue } from "./AccessibilityIssue";
import { AccessibilityIssueFindManyArgs } from "./AccessibilityIssueFindManyArgs";
import { AccessibilityIssueWhereUniqueInput } from "./AccessibilityIssueWhereUniqueInput";
import { AccessibilityIssueUpdateInput } from "./AccessibilityIssueUpdateInput";

export class AccessibilityIssueControllerBase {
  constructor(protected readonly service: AccessibilityIssueService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccessibilityIssue })
  async createAccessibilityIssue(
    @common.Body() data: AccessibilityIssueCreateInput
  ): Promise<AccessibilityIssue> {
    return await this.service.createAccessibilityIssue({
      data: {
        ...data,

        analysisResult: data.analysisResult
          ? {
              connect: data.analysisResult,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        severity: true,

        analysisResult: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccessibilityIssue] })
  @ApiNestedQuery(AccessibilityIssueFindManyArgs)
  async accessibilityIssues(
    @common.Req() request: Request
  ): Promise<AccessibilityIssue[]> {
    const args = plainToClass(AccessibilityIssueFindManyArgs, request.query);
    return this.service.accessibilityIssues({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        severity: true,

        analysisResult: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccessibilityIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accessibilityIssue(
    @common.Param() params: AccessibilityIssueWhereUniqueInput
  ): Promise<AccessibilityIssue | null> {
    const result = await this.service.accessibilityIssue({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        description: true,
        severity: true,

        analysisResult: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccessibilityIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccessibilityIssue(
    @common.Param() params: AccessibilityIssueWhereUniqueInput,
    @common.Body() data: AccessibilityIssueUpdateInput
  ): Promise<AccessibilityIssue | null> {
    try {
      return await this.service.updateAccessibilityIssue({
        where: params,
        data: {
          ...data,

          analysisResult: data.analysisResult
            ? {
                connect: data.analysisResult,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          severity: true,

          analysisResult: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccessibilityIssue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccessibilityIssue(
    @common.Param() params: AccessibilityIssueWhereUniqueInput
  ): Promise<AccessibilityIssue | null> {
    try {
      return await this.service.deleteAccessibilityIssue({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          description: true,
          severity: true,

          analysisResult: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
